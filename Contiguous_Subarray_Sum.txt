class Solution:
    def checkSubarraySum(self, nums: List[int], k: int) -> bool:
        table = defaultdict(int)
        table[0] = -1
        total = 0
        flag = 0
        if(len(nums) < 2):
            return False
        if(k == 0 or k == 1):
            return True
        for i in range(len(nums)):
            total += nums[i]
            if(flag == 1 and nums[i] == 0):
                return True
            flag = 0
            if((total % k) in table and (i - table[total % k]  > 1)):
                return True
            table[total % k] = i
            if(nums[i]==0):
                flag = 1
        return False
        
        
        #############################################################################3
        //C++ code for Contiguous Subsum Array
        //Logic is Find Cumulative Sum and store it in unordered Map...(Basically we need to store duplicate Keys)...
class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
        unordered_map<int,int> m =  {{0,-1}};
        int r = 0;
        for(int i = 0 ; i < nums.size();i++){
            r += nums[i];
            
            if(k) r %= k;
            if(m.count(r)){
                if(i - m[r] > 1) return true;
            }
            else{
                m[r] = i;
            }
        }
        return false;
        
    }
};
