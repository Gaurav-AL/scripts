/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isEvenOddTree(TreeNode root) {
        LinkedList<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        int level = 0;
        if(root.val % 2 == 0){
            return false;
        }
        while(!queue.isEmpty()){
            List<Integer> children = new ArrayList<>();
            int len = queue.size();
            
            for(int i = 0; i < len; i++){
                TreeNode curr = queue.remove(0);
                
                children.add(curr.val);
                
                if(curr.left != null){
                    queue.add(curr.left);
                }
                if(curr.right != null){
                    queue.add(curr.right);
                }
                
            }
            
            if(level % 2 == 0){
                if(children.get(0) %2 == 0) return false;
                for(int i = 1; i < children.size();i++){
                    if(children.get(i) % 2 == 0  || children.get(i-1) >= children.get(i)){
                        return false;
                    }
                }
            }
            if(level % 2 != 0){
                if(children.get(0) % 2 != 0)return false;
                for(int i = 1; i < children.size();i++){
                    if(children.get(i) % 2 != 0  || children.get(i-1) <= children.get(i)){
                        return false;
                    }
                }
            }
            // System.out.println(children+" "+level);
            level += 1;
            
        }
        return true;
    }
}
